{"version":3,"sources":["logo.svg","components/Hero.js","components/Footer.js","components/Home.js","mappers/linkMapper.js","components/StreamingLinks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","props","image","console","log","useEffect","window","location","href","className","id","to","src","process","Footer","Home","linkMap","strangers","spotify","apple","tidal","google","amazon","youtube","linkMapper","song","StreamingLinks","links","class","target","validSongLinkParams","getSongFromQueryString","URLSearchParams","search","get","includes","App","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,mICqB5BC,MAlBf,SAAcC,GAAQ,IACZC,EAAUD,EAAVC,MAOR,OANAC,QAAQC,IAAIF,GAEZG,qBAAU,WACRC,OAAOC,SAASC,KAAO,mCAIvB,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,YAAYC,GAAG,wBACtB,yBAAKD,GAAG,WAAWE,IAAKC,GAAyBX,O,MC6C1CY,MAlBf,WAEE,OADAX,QAAQC,IAAI,+BAEV,yBAAKK,UAAU,UAEb,yBAAKC,GAAG,eACN,uBAAGF,KAAK,8CAAR,qBAEF,6BACE,kBAAC,IAAD,CAAMG,GAAG,wBAAT,mDCnCOI,MATf,WACI,OACI,yBAAKN,UAAU,QACX,kBAAC,EAAD,CAAMP,MAAM,iBACZ,kBAAC,EAAD,QCVNc,EAAU,CACZC,UAAW,CACPC,QAAS,kFACTC,MAAO,2EACPC,MAAO,2CACPC,OAAQ,+GACRC,OAAQ,oJACRC,QAAS,iCAQFC,MAJf,SAAoBC,GAChB,OAAOT,EAAQS,ICgBJC,MAtBf,SAAwBzB,GAAQ,IACpBwB,EAASxB,EAATwB,KACFE,EAAQH,EAAWC,GACzB,OACI,yBAAKhB,UAAU,SACX,yBAAKC,GAAG,aACJ,kBAAC,IAAD,CAAMC,GAAG,KACL,0BAAMD,GAAG,kBAAT,UAGR,yBAAKD,UAAU,QACX,yBAAKC,GAAG,WAAWE,IAA8B,oBAErD,yBAAKgB,MAAM,YAAYlB,GAAG,SAA1B,IAAmC,8BAAM,uBAAGD,UAAU,OAAOoB,OAAO,SAASrB,KAAMmB,EAAMT,SAAhD,aACzC,yBAAKU,MAAM,YAAYlB,GAAG,SAA1B,IAAmC,8BAAM,uBAAGD,UAAU,OAAOoB,OAAO,SAASrB,KAAMmB,EAAMR,OAAhD,iBACzC,yBAAKS,MAAM,YAAYlB,GAAG,SAA1B,IAAmC,8BAAM,uBAAGD,UAAU,OAAOoB,OAAO,SAASrB,KAAMmB,EAAMP,OAAhD,WACzC,yBAAKQ,MAAM,YAAYlB,GAAG,SAA1B,IAAmC,8BAAM,uBAAGD,UAAU,OAAOoB,OAAO,SAASrB,KAAMmB,EAAMJ,SAAhD,WAAN,MACnC,yBAAKK,MAAM,YAAYlB,GAAG,SAA1B,IAAmC,8BAAM,uBAAGD,UAAU,OAAOoB,OAAO,SAASrB,KAAMmB,EAAML,QAAhD,oBCCrD,IAAMQ,EAAsB,CAAC,aAE7B,SAASC,EAAuB9B,GAC9B,IAAMwB,EAAO,IAAIO,gBAAgB/B,EAAMM,SAAS0B,QAAQC,IAAI,YAC5D,OAAIJ,EAAoBK,SAASV,GACvB,kBAAC,EAAD,iBAAoBxB,EAApB,CAA2BwB,KAAMA,KAEjC,kBAAC,EAAD,MAKGW,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWP,OCLfQ,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.5fc79d2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Hero(props) {\n  const { image } = props;\n  console.log(image);\n\n  useEffect(() => {\n    window.location.href = 'https://cityprincessmusic.com';\n  });\n\n  return (\n    <div className=\"Hero\">\n      <Link id=\"hero-link\" to=\"/?songLink=strangers\">\n        <img id=\"Hero-img\" src={process.env.PUBLIC_URL + image}></img>\n      </Link>\n\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport AudioPlayer from \"react-modular-audio-player\";\n\nlet audioFiles = [\n  {\n    src: process.env.PUBLIC_URL + '/strangers.mp3',\n    title: \"Strangers in the Dark\"\n  }\n];\n\n\nlet rearrangedPlayer = [\n  {\n    className: \"tier-top\",\n    style: { width: \"fit-content\" },\n    innerComponents: [\n      {\n        type: \"name\",\n        style: { width: \"fit-content\" }\n      },\n      {\n        type: \"play\",\n        style: { width: \"fit-content\" }\n      },\n      {\n        type: \"rewind\",\n        style: { width: \"fit-content\" }\n      },\n      {\n        type: \"forward\",\n        style: { width: \"fit-content\" }\n      },\n      {\n        type: \"volume\",\n        style: { width: \"5rem\" }\n      }\n    ]\n  }\n]\n\nfunction Footer() {\n  console.log(\"Shout out from the console!\");\n  return (\n    <div className=\"Footer\">\n      \n      <div id=\"footer-text\">\n        <a href=\"https://www.instagram.com/_city_princess_/\">@_city_princess_</a>\n      </div>\n      <div>\n        <Link to=\"/?songLink=strangers\">Listen to debut single Strangers in the Dark</Link>\n      </div>\n      {/* <AudioPlayer\n          iconSize=\"1.5rem\"\n          fontSize=\"1rem\" audioFiles={audioFiles} rearrange={rearrangedPlayer} /> */}\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\n\nimport Main from './Hero';\nimport Header from './Header'\nimport Footer from './Footer';\n\nfunction Home() {\n    return (\n        <div className=\"Home\">\n            <Main image='/VHSHero.png' ></Main>\n            <Footer></Footer>\n        </div>\n    );\n}\n\nexport default Home;","const linkMap = {\n    strangers: {\n        spotify: \"https://open.spotify.com/album/3eh4VVaMBjGQwQTeRq6Ovu?si=aJO33NVnTbGLa-3iqSapug\",\n        apple: \"https://music.apple.com/us/album/strangers-in-the-dark-single/1530525376\",\n        tidal: 'https://tidal.com/browse/album/154209840',\n        google: 'https://play.google.com/store/music/album/Ruff_Strangers_in_the_Dark?id=Bxvum7hhsuymdxmbav26podleeq&hl=en_US',\n        amazon: 'https://music.amazon.com/albums/B08HKT9252?trackAsin=B08HKS1NLL&ref=dm_sh_73c3-b95d-dmcp-b60e-9df76&musicTerritory=US&marketplaceId=ATVPDKIKX0DER',\n        youtube: 'https://youtu.be/CTvUYA5V7WI'\n    }\n}\n\nfunction linkMapper(song) {\n    return linkMap[song];\n}\n\nexport default linkMapper;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Hero from './Hero'\nimport linkMapper from '../mappers/linkMapper';\n\nfunction StreamingLinks(props) {\n    const { song } = props;\n    const links = linkMapper(song);\n    return (\n        <div className=\"Links\">\n            <div id='ruff-home'>\n                <Link to='/'>\n                    <span id='ruff-home-name'>RUFF</span>\n                </Link>\n            </div>\n            <div className=\"Hero\">\n                <img id=\"Hero-img\" src={process.env.PUBLIC_URL + './city-vhs.png'}></img>\n            </div>\n            <div class='linkClass' id='link1'> <span><a className=\"link\" target=\"_blank\" href={links.spotify}>Spotify</a></span></div>\n            <div class='linkClass' id='link2'> <span><a className=\"link\" target=\"_blank\" href={links.apple}>Apple Music</a></span></div>\n            <div class='linkClass' id='link3'> <span><a className=\"link\" target=\"_blank\" href={links.tidal}>Tidal</a></span></div>\n            <div class='linkClass' id='link4'> <span><a className=\"link\" target=\"_blank\" href={links.youtube}>YouTube</a> </span></div>\n            <div class='linkClass' id='link5'> <span><a className=\"link\" target=\"_blank\" href={links.amazon}>Amazon Music</a></span></div>\n        </div>\n    );\n}\n\nexport default StreamingLinks;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Home from './components/Home';\nimport StreamingLinks from './components/StreamingLinks'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={getSongFromQueryString}>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nconst validSongLinkParams = ['strangers'];\n\nfunction getSongFromQueryString(props) {\n  const song = new URLSearchParams(props.location.search).get('songLink')\n  if (validSongLinkParams.includes(song)) {\n    return (<StreamingLinks {...props} song={song} />)\n  } else {\n    return (<Home />)\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}